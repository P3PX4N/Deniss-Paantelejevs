//#include <iostream>
//#include <string>
//#include <vector>
//using namespace std;
//int binarySearch(int myarray[], int beg, int end, int key)
//{
//    int mid;
//    if (end >= beg) {
//        mid = (beg + end) / 2;
//        if (myarray[mid] == key)
//        {
//            return mid + 1;
//        }
//        else if (myarray[mid] < key) {
//            return binarySearch(myarray, mid + 1, end, key);
//        }
//        else {
//            return binarySearch(myarray, beg, mid - 1, key);
//        }
//    }
//    return -1;
//}
//int main()
//{
//    int myarray[21] = {3,4,5,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8};
//    vector<string>names{""};
//    int key, location = -1;
//    cout << "The input array is" << endl;
//    for (int i = 0; i < 21; i++) {
//        cout << myarray[i] << " ";
//    }
//    cout << endl;
//    cout << "Enter the key that is to be searched:"; cin >> key;
//    location = binarySearch(myarray, 0, 20, key);
//    if (location != -1) {
//        cout << "Key found at location " << location;
//    }
//    else {
//        cout << "Requested key not found";
//    }
//}


/*#include <iostream>
#include <string>
using namespace std;
int main()
{
    int myarray[5] = { 21,43,23,54,75};
    int key, loc;
    cout << "The input array is" << endl;
    for (int i = 0; i < 5; i++) {
        cout << myarray[i] << " ";
    }
    cout << endl;
    cout << "Enter the key to be searched : ";
    cin >> key;
    for (int i = 0; i < 5; i++)
    {
        if (myarray[i] == key)
        {
            loc = i + 1;
            break;
        }
        else
            loc = 0;
    }
    if (loc != 0)
    {
        cout << "Key found at position " << loc << " in the array";
    }
    else
    {
        cout << "Could not find given key in the array";
    }

}*/

/*#include <iostream>
#include <string>
using namespace std;

void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

int main()
{

    return 0;
}*/

///* File Handling with C++ using ifstream & ofstream class object*/
///* To write the Content in File*/
///* Then to read the content of file*/
//#include <iostream>
//
///* fstream header file for ifstream, ofstream,
//fstream classes */
//#include <fstream>
//#include <string>
//
//using namespace std;
//
//// Driver Code
//int main()
//{
//    // Creation of ofstream class object
//    ofstream fout;
//
//    string line;
//
//    // by default ios::out mode, automatically deletes
//    // the content of file. To append the content, open in ios:app
//    // fout.open("sample.txt", ios::app)
//    fout.open("sample.txt");
//
//    // Execute a loop If file successfully opened
//    while (fout) {
//
//        // Read a Line from standard input
//        getline(cin, line);
//
//        // Press -1 to exit
//        if (line == "-1")
//            break;
//
//        // Write line in file
//        fout << line << endl;
//    }
//
//    // Close the File
//    fout.close();
//
//    return 0;
//}

#include <iostream>
#include <fstream>
#include <string>
#include <windows.h>
using namespace std;

//int DisplayResourceNAMessageBox()
//{
//    int msgboxID = MessageBox(
//        NULL,
//        (LPCWSTR)L"Do you want to save this to file?",
//        (LPCWSTR)L" ",
//        MB_ICONQUESTION | MB_CANCELTRYCONTINUE | MB_DEFBUTTON2
//    );
//
//    switch (msgboxID)
//    {
//    case IDCANCEL:
//        exit(-1);
//    case IDTRYAGAIN:
//        DisplayResourceNAMessageBox();
//        break;
//    case IDCONTINUE:
//        break;
//    }
//
//    return msgboxID;
//}
int main()
{
    string my;
    ofstream myfile;
    myfile.open("sample.txt", ios::app);
    int i = 0;
    do {
        i -= -1;
        cout << "Say something" << endl;

        getline(cin, my);

        myfile << my << endl;
        /*DisplayResourceNAMessageBox();*/

    } while (i != 5);
    myfile.close();

    ifstream myreadFile;
    myreadFile.open("sample.txt");
    char output[100];
    if (myreadFile.is_open()) {
        while (!myreadFile.eof()) {
            myreadFile >> output;
            cout << output << endl;
        }
    }

    return 0;

}
